#pragma once

#include <unordered_map>

#include "ISA.hpp"

static const std::unordered_map<std::string, uint8_t> reg_name_map = {
    {"ax", 0}, {"bx", 1}, {"cx", 2}, {"dx", 3}, {"fax", 4}, {"fbx", 5}, {"fcx", 6}
};

static const std::unordered_map<std::string, uint8_t> instruction_name_map = {
    {INSTR_LOAD_STR, INSTR_LOAD}, {INSTR_LOADS_STR, INSTR_LOADS}, {INSTR_LOADC_STR, INSTR_LOADC},
    {INSTR_STORE_STR, INSTR_STORE}, {INSTR_STORES_STR, INSTR_STORES},
    {INSTR_COPY_STR, INSTR_COPY},
    {INSTR_ADD_STR, INSTR_ADD}, {INSTR_SUB_STR, INSTR_SUB}, {INSTR_MUL_STR, INSTR_MUL}, {INSTR_DIV_STR, INSTR_DIV},
    {INSTR_IDIV_STR, INSTR_IDIV}, {INSTR_SHL_STR, INSTR_SHL}, {INSTR_SHR_STR, INSTR_SHR},
    {INSTR_AND_STR, INSTR_AND}, {INSTR_OR_STR, INSTR_OR}, {INSTR_XOR_STR, INSTR_XOR}, {INSTR_NOT_STR, INSTR_NOT},
    {INSTR_FADD_STR, INSTR_FADD}, {INSTR_FSUB_STR, INSTR_FSUB}, {INSTR_FMUL_STR, INSTR_FMUL}, {INSTR_FDIV_STR, INSTR_FDIV},
    {INSTR_CMP_STR, INSTR_CMP}, {INSTR_CMPI_STR, INSTR_CMPI}, {INSTR_CMPF_STR, INSTR_CMPF},
    {INSTR_PUSH_STR, INSTR_PUSH}, {INSTR_POP_STR, INSTR_POP}, {INSTR_CALL_STR, INSTR_CALL}, {INSTR_RET_STR, INSTR_RET},
    {INSTR_SYSCALL_STR, INSTR_SYSCALL},
    {INSTR_STOP_STR, INSTR_STOP},
    {INSTR_JMP_STR, INSTR_JMP}, {INSTR_JMPZ_STR, INSTR_JMPZ}, {INSTR_JMPS_STR, INSTR_JMPS}, {INSTR_JMPC_STR, INSTR_JMPC}
};